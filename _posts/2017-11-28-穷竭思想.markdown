---
layout: post
title: "穷竭思想"
date: 2017-11-28 15:12:45 +200
---

在众多解决问题的思想里，如果你问我，哪一个思想最有趣，我会说除了穷竭都很有趣。但你要问我，哪一个最重要？我会说穷竭思想最重要。

## 穷竭思想

穷竭思想的本质很清晰明了，就是遍历问题的所有解空间，然后寻找目标解。

就因为它的简洁明了，对问题模型的约束条件少，使得它适用大多数场景。而本篇文章，则是介绍几种主要的遍历思路，以及优化的方法。使得我们可以根据不同的形式去选择适合的遍历方式更快的找到需要的那一个最优解。

应用穷竭思想的题目大致分为两类：

**第一类。每一个可能的解都不需要状态变迁，或者状态变迁次数很少就可以直接得到一个解。**
**第二类。每一个可能的解都需要状态的多次转移才可以获得，然后再判定。**

我们通过举例说解释这两个概念，考虑如下题目：

#### 给定一个数组，再给定一个目标值k。求这个数组中那两个数字之和等于目标值k

例如：[1, 2, 3, 4] k = 6

ans: 2 4

在解决这个题目的暴力破解中，解空间是每个数字两两相加的和，解空间是[3, 4, 5, 6, 7]。

我们是通过如下的双重循环来遍历解空间的

```
for( int i = 0; i != size; ++i )
    for( int j = i + 1; j != size; ++j )
        if arr[i] + arr[j] == k
            find!
```

可以发现这道题中，我们需要找到一个解，只需要将两个数字相加便可。从一个数字状态出发再加上另一个数字变成最终的解状态。这就是我上述所说的第一类题目，状态变换简单且次数少，并且直接就得到解。所以我们容易就解决这道题。接下来再看看第二类题目：

#### 给定一个数字n，求小于等于这个数字的全排列

例如：n = 4

ans: 1234 1243 1324 1342 ……

在这道题目里面，我们就不是要求解最优解了，而是要求出所有解。而每一个解，但要经历n次状态转移才能得到，当n很大时，就需要状态变换多次。例如，求1243这个组合的时候，我们需要从1->2->4->3，需要经历这样一个状态的变换，才能到达最终状态“1243”，也就是解。

对于这类状态变换多甚至状态变换过程复杂的题目时，我们就无法像上题一样了。这时候我们就需要有技巧的去遍历了。

这里我们主要介绍两个遍历的方式：DFS以及BFS。

不了解的同学请戳这里搜索思想——DFS & BFS（基础基础篇）以及搜索思想——DFS & BFS（基础篇）。

看完了上述两篇文章想必也对深度优先遍历与宽度优先遍历的思想有了一定的了解。

**在我们面对第二类题目时，很多时候都可以将状态想象成空间中的节点，状态的变换相当于节点之间的可行边，寻找解的过程则变成了在一个节点图中寻找到一条正确的路径。**

经过了这样的思想转换，我们就可以利用DFS和BFS来进行搜索，有条有理的搜索。

但是通常在应用穷竭思想的时候，会碰到一个问题——**解空间太大了或者过程太复杂**，使得我们的算法整体复杂度过高，无法应用到实际，这时候就需要一些简单的优化方法了。这里我们介绍分支定界+回溯法。

## 优化方法

#### 回溯法

我们举例四皇后的例子

在一个4 * 4的棋盘上，要求摆放4个皇后棋子。使得他们不在同一行同一列同一对角线。

如图就是一个可行的摆放方案。对于朴素的暴力搜索来说我们的代码应当是这样的

![picture 1](https://pic3.zhimg.com/80/v2-f76179d7bd0ec27a6bd443d663be190f_hd.jpg)

```
for( 1 -> 4 )
    for( 1 -> 4 )
        for( 1 -> 4 )
            for( 1 -> 4 )
                满足不同行列对角线？
```

但是我们实际情况下，是存在许多无意义的可能结果的，比如下图：

![picture 2](https://pic1.zhimg.com/80/v2-8280f6b1fa01cb11d05a9dd43074f889_hd.jpg)

在这个情况下，我们身处第三重循环的开始，对于第三个棋子，我们已经没有任何可行的位置摆放了，无论摆放到哪里，都是死。我们还有必要去遍历吗？当然是不值得的，所以这时候我们就需要状态回溯，回退到上一个状态，也就是第二重循环，再开始新的探索。这样便减少了许多不必要的遍历。

值得注意的是，回溯法回溯的是状态，而状态则是由数据组成的，所以具体而言我们就是将数据还原到上一个的值。通常递归是遍历的主要形式，所以在函数回退后，我们一定要记得将数据也回退。

#### 分支定界

再说分支定界，这个名字还是听起来很清真的感觉。当我们在遍历解空间的时候，我们其实是在寻找一个满足题目条件且相比于已发现的解更优的一个过程。

那么，满足条件以及更优。这本身就是两个约束，在解空间中，必然会存在一些解不满足这两个约束。就如同上述四皇后问题，我们在放置第三枚棋子时就发现无论后续怎么摆放都无法满足题目条件了，知道是死路，就不继续走下去了。而这个判定就是分支定界的思想。

它的思想是在遍历每个解的过程中，给定一个函数来判断当前解是否值得去遍历。若函数判断不满足，我们就无需继续当前解，而是转向其他解。

## 总结

分支定界与回溯法往往一起使用，分支定界限定条件，条件不满足时使用回溯法回退，进而实现在遍历节点图中，删除一些注定无用的路线。我们通俗的称这个过程为“剪枝”（像是把树上的一些无用的枝条减去）。

上述所讲，是穷竭搜索中最基本的知识和一些个人见解。在实际情况中，有更多的技巧和方法，我的下篇文章将以例题解析以及技巧为主，希望大家继续关注。