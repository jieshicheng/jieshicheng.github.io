---
layout: post
title: "算法题概念初解"
date: 2017-11-14 01:12:12 +200
---
算法，在CS专业学习阶段经常被提及的一个词语，相信每个人都或多或少有接触，都有自己的理解，可谓是一千个coder有一千种对算法的理解，这里我想谈谈自己对于接触了快一年的算法题目的理解。

## 算法题是什么：

我所理解的是：

**给定一种信息约束（或通俗的说是给定一种需求），以及相应的输入，希望得到符合要求的输出。**

这其实是一个很普遍的概念，CS专业中所有的需求都扩展在这个概念之上，一个大型的系统也是由这样一个个小的组件搭建而成，每个部件完成它对于输入到输出的转换，再将输出传递给其他的部件，这样才像搭积木一样将一个大型的软件架构出来，而部件的成功与质量的好坏则影响着整个系统。

而这种概念最终目的则在于——培养解决问题的思维。算法题目与工业需求的差别在于它去除了许多工程方面的影响因素，弱化了非思维因素的权重，更聚焦在问题解决的思路上，旨在培养一种思维能力，所以有许多人认为优秀的竞赛选手不意味着优秀的工程实践者，原因在于优秀的竞赛者它的优秀是体现在思维能力上，这种优势体现在职业生涯的长度与高度上，而不是落实到初期的具体领域。

## 当我们做题目的时候我们在做什么：

对于解决一个算法题，在我看来分为两大步骤

**1.逻辑建模：逻辑建模意为建立一个能解决这一通类问题的逻辑模型**

**2.语言化：语言化则是将这一个逻辑模型转化为编程语言，交由计算机去执行**

其中逻辑建模是对思维能力的综合考验，语言化则是在于编程能力的体现，我将通过下述的几个例子来阐明这两个过程

#### 我们先来看一个简单的算法题：Two Sum（两数之和）

给定一个整型数组，是否能找出其中两个数的和为某个特定的值。

这道题很简单，当我们不去考虑如何用计算机实现的时候，单纯思考并用自然语言描述解决办法出来，这就是逻辑建模的过程，这里我们第一反应自然就是从第一个数字开始，然后分别判断它与后面的每个数字相加的值与目标值是否相等，如果不等，再从第二个数字开始，分别与第二个数字后面的每个数字相加再和目标值做比较，以此类推，直到找到符合条件的情况发生。这便是对于这一类问题的通用解决办法，然后再是将它转换成自己熟悉的编程语言去实现它。

也许这个例子太简单了让你觉得我说的话没有意义，但这里我引用这个例子的目的在于说明：对于任何算法题，简单或困难，都会存在这两个过程，也许简单的问题会让你的大脑瞬间建模完毕，所以你可以立马着手将它语言化，但如果长期适应于这种情况下，会让你的大脑逐渐忽略逻辑建模这一步，以至于更注重于语言化。在面对困难的建模问题的时候，这将会阻碍你的思考，在你没有得到一个完整的清晰的模型时就妄动手指，必然会让你陷入逻辑模型与语言各种细节交织的陷阱中，所以，重视逻辑建模这一步是解决问题的重中之重。

我们再来另外一个非常有名且稍有难度的题目：01背包问题

一个背包总容量为V，现在有N个物品，第i个物品体积为weight[i]，价值为value[i]，现在往背包里面装东西，怎么装能使背包内的物品价值最大？

例如:背包容量V=5，一共有N=4个物品，4个物品的{价值，重量}分别为 {3,2}，{2,1}，{4,3}，{2,2}

在这样的小规模数据下，我们人可以简单的识别出正确答案是7，也就是把第1，2，4个物品放到背包中去。可是当物品有几百个，几千个的时候呢？肉眼还能简单的识别出来吗？

许多时候都会存在我们人可以找到正确答案，但是却无法第一时间建立一个模型来描述人是如何解决这个问题的，算法题目真正的困难所在，就是这里——**你能回答出正确的题目样例，但是你无法建立相应的模型，而逻辑都没确定下来，妄动手指必然只让会你的思绪更加混乱。**

而上述题目的模型其实也很简单，其实就是对于每一个物品放与不放两种情况都做考虑，然后再分别去计算后续的情况

![picture 1](https://pic3.zhimg.com/80/v2-d4a32b18ca884d5ef3e159b90c96f965_hd.jpg)

这里不做过多解释，感兴趣的同学可以去看我相关文章(一只脚迈入DP的海洋)。

说了许多逻辑建模的，再来说说语言化，这个过程则是主要靠练习，大部分刷题主要提升的则是这个过程。

通过做大量的各类型的题目，这些题目的模型多种多样，每种模型都用代码实现过后，下次再碰到相似的模型，就能快速将它语言化，从而节省更多的时间，提高更多的效率。

## 在此之后：

当了解了这些基础的认知后，我们才能真正的开始学习算法。毕竟没有算法理论的支持，我们逻辑建模出来的模型都是最原始的，朴素的，或者说是低效率的，就像上述举例的两个算法题。而算法的作用则是改善已有的低效率的模型，熟练之后则能让你直接建立出高效率的模型，甚至是给你一个全新的视角去看待这个问题，这时候才是思维能力得到质的飞跃的时候。

## 算法重要吗：

这是一个充满异议的却又毋庸置疑的问题，我是非常推荐学生去搞算法竞赛的，也有人反驳我的观点，这个世界上确实有大量不是有着竞赛经历的优秀CS工作者，但是它们当中没有一个不是有着优秀思维能力的CS工作者，能提高自己的路径有许多条，条条大路通罗马，只不过算法竞赛这一条或许是最广为人接受，马路最宽敞的一条罢了，有着许多优秀的案例。

**因此最终的选择权在自己手上，想怎么走都可以，只要不停下来就是前进。**
