---
layout: post
title: "关于腾讯实习的一点个人心得"
date: 2018-08-11 1:1:1 +200
---

> 导读：作为一名弱校大三狗，有幸拿到了腾讯的暑期实习生offer，从七月初入职至今，接近一个半月的时间，渡过了最初的迷茫期，渐渐习惯了实习生活，适逢考核期间，因此写下这篇文章总结一下这段时间的心得与收获，内容以技术为主，体验为辅。当然了，鉴于保密，这里只是聊一聊一些宽泛的东西了。


在进入大三下学期后，学习的进度肉眼可见的放慢了，学完了大部分基础课程，对于接下来的学习计划也是比较茫然。由于并不是太喜欢学校设置的培养方案，大学三年一直以来都是自己规划学习方向与计划，得益于互联网本身的信息优势，我们可以轻松的获取高校、大牛等等的推荐方案，因此大学三年过来也算勉强是按标准学完了基础课程，之后就比较迷茫，工作的技术方向千差万别，接下来如何走，完全没有头绪，在这方面，也少有信息可以借鉴，所幸拿到了实习机会，未来的技术路线如何走，只能自己亲身去探寻，期待着这份实习能带来答案。

在聊技术前，先侃一侃生活感受，国内龙头级别公司的待遇当然是相当不错的，抛开深圳不谈，毕竟就没出过南山区（滑稽.jpg）。公司的环境很棒，特别是新大楼（虽然我不在那里），对于我这种爱运动健身又没有女朋友的码农来说，周末泡公司吹空调、健身、蹭食堂便成了家常便饭，当然了VPN也是极佳的，毕竟最近风声比较紧，以前用的都没几个活着的了。

食堂可以吹一波，一个多月了，还没吃遍全部的档口，工作时间也比较弹性，就我所在的部门而言个人是这样的感受。作为实习生，竞争压力还是相当大的，望着同组的都是研究生，本科学历与学校的劣势确实给了我不小的紧迫感，早出晚归是大部分实习生的常态，倒也不能叫做加班，心甘情愿的事，就技术人员的角度来说，能学到有吸引力的知识本身就是一件让人愉悦的事，总而言之，生活体验无可挑剔，有足量的压力，是为理想的工作环境。

正文开始，说一说技术心得。进来首先接触到的rpc框架，也就是目前腾讯正开源出去的Tars，还好Tars开源了，不然这篇文章还真没法写。rpc框架其实也是绝大部分做开发的毕业生工作后首要接触与使用的东西了，说来也是挺有意思的，在大三上学期的时候，当时想给学校做一个OJ平台，提高一下CS氛围，用C++写了一个测评端，由于后台用的是Java，最开始是打算封装一下接口给Java调用的，后来想把测评端分离出去成一个进程，用IPC机制，再一想为啥不彻底点，放到一台性能比较强劲的机器上，用tcp远程调用。再后来，还专门（瞎）写了一个交互协议，实在是当时见识少，现在想想用http多省事。

这也算是对于rpc的第一次接触了，虽然rpc是我在实习后才第一次了解到的，但后面一想，当时自己其实不就是做了一个low到不能再low的rpc机制了吗，也是看了Tars源码后，才发现rpc这东西，还能整出这么多花样来，首先从纯粹的rpc角度来说，因为Tars不只是rpc，还集成了更多。Tars的C/S两端都是采用的多线程+epoll，支持同步、异步、协程等调用方式，客户端双层负载均衡的设计，以及数据交互协议Tars（一种编解码的方式）等等，对于刚接触的我来说简直就是打开了新世界的大门，因为这些点都是很直观的与有用，且又是可见的知道如何实现他们，当然不是指其容易实现，而是类似于当你知道1+1 = 2的时候，你不会对12345 + 79080这种感到未知与遥远，因为你知道如何做，尽管不一定做得到。

正如我前面所说，Tars不止rpc，目前开源在github，这里我摘取它的一部分官方描述：

> Tars是腾讯从2008年到今天一直在使用的后台逻辑层的统一应用框架TAF（Total Application Framework），目前支持C++,Java,PHP,Nodejs语言。该框架为用户提供了涉及到开发、运维、以及测试的一整套解决方案，帮助一个产品或者服务快速开发、部署、测试、上线。 它集可扩展协议编解码、高性能RPC通信框架、名字路由与发现、发布监控、日志统计、配置管理等于一体，通过它可以快速用微服务的方式构建自己的稳定可靠的分布式应用，并实现完整有效的服务治理。

在我第一次接触TAF时（内部使用TAF，对外开源为Tars），除了第一句，我也是看不懂这一段话在讲什么七七八八的东西，后续才慢慢了解，因为这其实对于一个开发人员来说，特别是学生而言，没经历过正规开发流程与大型项目很难理解的。说人话就是我不经意的发现：我们项目组内运维人员很多。而我又完全不知道运维具体的职能，特别是我本身就在运营部门，却一窍不通？？？感觉有点愧疚， 因此google了一波，然后好几天就看过去了。

用两个词来概括自己的收获就是DevOps与微服务这两个理念。最开始在学校写一些代码的时候是这样的：写代码->在自己电脑上编译运行->测试一下->大功告成，其实这些步骤也就相当于开发、运维、测试等角色，只是写一些简单的东西时我们一个人承包了所有角色，但当软件规模变大，个人的力量便有限了，于是职能分工，但不同职能之间的合作，则整体的效率必然会受影响，减少效率的损耗就成了很核心的问题，DevOps则是一种解决此类问题的理念，摘自wiki：

> DevOps（Development和Operations的组合词）是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。透过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠

简单的以开头讲开发OJ平台为例子，假若我采用的还是最初的方案，让Java调用我的C接口的形式设计这个平台，则开发流程就会变成：我在我的电脑上写好了代码，高高兴兴打电话给开发Java的同学，说我这里做好了，你那里什么时候搞好，我们合一起测试测试，结果被告知还没做好，要等等。（玩了一周塞尔达后）终于接到电话，得知可以合并测试了，高高兴兴把代码带过去，结果编译失败，这时候就是祭出那句很经典的甩锅了：在我的电脑上跑的好好的，这不能怪我啊emmm。于是呼哧呼哧折腾一番环境依赖，终于能跑起来了，因为过了许久才合并测试，改动的地方很多，因此到处是bug，到处要测试，在此背景下，距离上线就更是路漫漫了，就更别说上线还得把服务停了，折腾个几个小时，才再开放服务。让我想起了以前玩CSOL，每周都会更新，一次更新大概4个小时不准你玩，有天早上特意大清早爬起来，高高兴兴开游戏，艹。

假设我手头上有一整套完整的落地的DevOps解决方案，搭配微服务，上述问题就迎刃而解了，Java端还没开发完？没关系，服务与服务之间是解耦的，只要接口没变，我测我的，你写你的，然后make一下，起身泡杯菊花枸杞养生茶，回来，正好程序已经发布到测试环境上了，有bug？从控制中心直接可以看日志定位，想改点数据？改完配置文件直接自动重启，要上线了很慌？灰度一下，不想用户等？无损发布，用户投诉了？直接一键回滚（当然，如果是大问题，可能一键回滚的就不只是版本了。。。）。

当然这只是其中一部分的好处，最重要的是作者水平不行，只能道出这些肤浅的优点，这里祭出两个很有趣的图片，在众多DevOps文章中都有它的出现，我觉得用它们来解释DevOps与微服务本身也是可行的，即最开始倘若我们没有经历过低效率的开发流程，没见识过职能之间的效率流失，当有人把DevOps摆在面前时，我们会觉得理所当然，觉得本就该这样设计，没什么新颖的，正如当今出生的小孩，他们碰到一块屏幕第一反应是触摸，换而言之对他们来说，触摸式交互方式是理所当然的：

![picture 1](https://pic2.zhimg.com/80/v2-30416038e4f00f8b26b0e79a8a14e502_hd.jpg)

而现实中开发流程管理，交互方式等的发展过程却是这样的：

![picture 2](https://pic1.zhimg.com/80/v2-7ec0e92236cccd46c2a5d4a9ef1a1d1b_hd.jpg)

纵向理解，横向对比。可以更好的帮助学习。

技术心得扯的有点远了，说回实习，由Tars入门，引发出对于DevOps和微服务的思考，伴以公司内部的落地解决方案，对于此时的我是一种全新的知识体验，虽然自己的理解还很微末，但好在埋下一颗种子。以前总听人说毕业生最好能进大公司，虽然是颗螺丝钉，但能学到很多流程与规范的东西。一直理解为制度，现在想来，对于技术人员来说，另一种诠释也许是技术背后的技术。

当我总结自己的收获时，发现自己，linux用的更6了？系统调用、网络模型理解更深了？C++用的更好了？等等，好像都没有，如我开篇所说，我是带着希望能找到未来的技术方向而来的，想了很久发现自己还是没能回答自己这个问题，但是心中却也不焦虑了，像是这个问题得到某种形式的解答，心情忽的轻松了起来。回想入职时一心想着表现自己，反而丢了自己原本的豁达，知易行难，知道很多，可真正要调整好心态却又谈何容易。

我的工位靠近窗户，正对着滨海大厦，还有中国平安的地标建筑，完成这篇文章时是周六的晚上，靠着椅子看夜景发呆，玻璃外是高楼，玻璃上是自己，此刻是这段时间中最惬意的时刻。两个月六十天，这场实习是对自己大学学习生涯的一次肯定，也是即将毕业的第一课，无论结果，心满意足。

**一句话给未来的自己或是同样即将步入职场的毕业生们：不以过去自傲，不以环境自卑，坦荡大方自信。**
